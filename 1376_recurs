class Solution {
public:
    void dfs(const int& cur, const int& t, int& res, const std::vector<int>& inftm, std::unordered_map<int,std::vector<int>>& child ){
        if(child[cur].size() == 0){
            res = std::max(res,t);
            return;
        }   
        int it = inftm[cur];
        for(const int& ch: child[cur]){
            dfs(ch,t + it,res,inftm,child);
        }
        return;
    }
    int numOfMinutes(int n, int headID, vector<int>& manager, vector<int>& informTime) {
        std::unordered_map<int,std::vector<int>>child;
        for(int i=0; i<n; ++i){
            if(manager[i] == -1) continue;
            child[manager[i]].push_back(i);
        }
        int res = 0;
        dfs(headID,0,res,informTime,child);
        return res;
    }
};
