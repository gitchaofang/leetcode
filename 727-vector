class Solution {
public:
    string minWindow(string S, string T) {
        int len = T.size();
        std::vector<std::vector<std::pair<int,int>>> dp(len);
        std::unordered_map<char,std::vector<int>> m;
        for(int i=0; i<T.size(); ++i) m[T[i]].insert(m[T[i]].begin(),i);
        for(int i=0; i< S.size(); ++i){
            char c = S[i];
            if (m.find(c) == m.end()) continue;
            for(const int& pos: m[c]){
                int pre = pos - 1;
                if(pre == -1) dp[0].push_back({i,i});
                else if(!dp[pre].empty()){
                    for(std::pair<int,int>& p: dp[pre]) p.second = i;
                    std::move(dp[pre].begin(), dp[pre].end(),std::back_inserter(dp[pos]));
                    dp[pre].clear();
                }
            }
        }
        if(dp.size() == 0 || dp.back().size() == 0) return "";
        auto cmp = [](const std::pair<int,int>& p1, const std::pair<int,int>& p2){
            if(p1.second - p1.first == p2.second - p2.first) return p1.first < p2.first;
            return p1.second - p1.first < p2.second - p2.first;
        };
        
        std::sort(dp.back().begin(), dp.back().end(), cmp);
       
        return S.substr(dp.back()[0].first, dp.back()[0].second - dp.back()[0].first + 1);
    }
};
