class Solution {
public:
    int shortestPath(vector<vector<int>>& grid, int k) {
        int row = grid.size();
        int col = grid[0].size();
        if(row == 1 && col == 1) return 0;
        std::vector<std::vector<int>> ob(row, std::vector<int>(col,k + 1));
        ob[0][0] = 0;
        std::queue<int> q({0});
        std::vector<std::pair<int,int>> dire({{0,-1},{-1,0},{0,1},{1,0}});
        int cnt = 0;
        while(!q.empty()){
            ++cnt;
            for(int i = q.size(); i > 0; --i){
                int cur = q.front();
                q.pop();
                for(const std::pair<int,int>& dir: dire){
                    int x = dir.first + cur / col;
                    int y = dir.second + cur % col;
                    if(x < 0 || x >= row || y < 0 || y >= col) continue;
                    int obs = ob[cur / col][cur % col] + grid[x][y];
                    if(obs > k) continue;
                    if(x == row -1 && y == col-1) return cnt;
                    if(obs < ob[x][y]){
                        ob[x][y] = obs;
                        q.push(x * col + y);
                    }
                }
            }
        }
        return -1;
    }
};
