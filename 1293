class Solution {
public:
    int shortestPath(vector<vector<int>>& grid, int k) {
        int row = grid.size();
        int col = grid[0].size();
        if(row == 0 || (row == 1 && col == 1)) return 0;
        std::vector<std::vector<int>> obs(row,std::vector<int>(col,0));
        std::queue<std::pair<int,int>> q({{0,0}});
        grid[0][0] = -2;
        int res = 0;
        std::vector<std::pair<int,int>> dire({{0,-1},{-1,0},{0,1},{1,0}});
        int hit = 0;
        while(!q.empty()){
            ++res;
            for(int i = q.size(); i > 0; --i){
                std::pair<int,int>p = q.front();
                q.pop();
                for(const std::pair<int,int>& dir: dire){
                    hit = obs[p.first][p.second];
                    int x = p.first + dir.first;
                    int y = p.second + dir.second;
                    if(x < 0 || x >= row || y < 0 || y >= col) continue;
                    if(x == row - 1 && y == col - 1) return res;
                    if(grid[x][y] == 1 || grid[x][y] == -1) ++hit;
                    if(hit > k) continue;
                    if(grid[x][y] >= 0){
                        grid[x][y] -= 2;
                        obs[x][y] = hit;
                        q.push({x,y});
                    }
                    else if(obs[x][y] > hit){
                        obs[x][y] = hit;
                        q.push({x,y});
                    }
                }
            }
        }
        return -1;
    }
};
