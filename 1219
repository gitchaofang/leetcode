class Solution {
public:
    int dfs(std::vector<std::vector<int>>& gold, const int& cur){
        int row = gold.size();
        int col = gold[0].size();
        std::vector<std::pair<int,int>> dire({{0,-1},{-1,0},{0,1},{1,0}});
        int res = 0;
        int d = gold[cur / col][cur % col];
        gold[cur / col][cur % col] *= -1;
        for(const std::pair<int,int>& dir: dire){
            int x = dir.first + cur / col;
            int y = dir.second + cur % col;
            if(x < 0 || x >= row || y < 0 || y >= col || gold[x][y] <= 0) continue;
            res = std::max(res, dfs(gold, x * col + y));
        }
        gold[cur / col][cur % col] *= -1;
        return res + d;
    }
    int getMaximumGold(vector<vector<int>>& grid) {
        int res = INT_MIN;
        int row = grid.size();
        int col = grid[0].size();
        for(int i = 0; i < row * col; ++i){ 
            if(grid[i / col][i % col] == 0) continue;
            res = std::max(res, dfs(grid, i));
        }
        return res;
    }
};
