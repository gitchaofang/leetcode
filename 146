class LRUCache {
public:
    LRUCache(int capacity):cap(capacity) {}
    
    int get(int key) {
        if(m.find(key) == m.end()) return -1;
        l.splice(l.begin(),l,m[key]);
        return l.begin() -> first;
    }
    
    void put(int key, int value) {
        if(m.find(key) != m.end()){
            m[key] -> first = value;
            l.splice(l.begin(),l,m[key]);
            return;
        }
        l.insert(l.begin(),{value,key});
        m[key] = l.begin();
        if(m.size() > cap){
            m.erase(l.back().second);
            l.pop_back();
        }
        return;
    }
private:
    int cap;
    std::unordered_map<int,std::list<std::pair<int,int>>::iterator> m;
    std::list<std::pair<int,int>> l;
};

