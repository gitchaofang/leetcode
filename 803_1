class Solution {
public:
    int find_root(const std::vector<int>& root, const int& d){
        return (root[d] == d) ? d :find_root(root, root[d]);
    }
    vector<int> hitBricks(vector<vector<int>>& grid, vector<vector<int>>& hits) {
        int row = grid.size();
        int col = grid[0].size();
        std::vector<int> root(row * col, -1);
        for(int i = 0; i < row * col; ++i){
            if(grid[i / col][i % col] == 1) root[i] = i;
        }
        for(const std::vector<int>&hit: hits){ 
            if(grid[hit[0]][hit[1]] == 0) grid[hit[0]][hit[1]] = -1;
            else grid[hit[0]][hit[1]] = 0;
        }
        std::vector<std::pair<int,int>> dire({{0,-1},{-1,0},{0,1},{1,0}});
        std::vector<int> block(row * col, 1);
        for(int i = 0; i < row * col; ++i){
            if(grid[i / col][i % col] != 1) continue;
            for(const std::pair<int,int>& dir: dire){
                int x = i / col + dir.first;
                int y = i % col + dir.second;
                if(x < 0 || x >= row || y < 0 || y >=col || grid[x][y] != 1) continue;
                int p = find_root(root, i);
                int q = find_root(root, x * col + y);
                if(p == q) continue;
                if(q / col == 0){
                    root[p] = q;
                    block[q] += block[p];
                }
                else {
                    root[q] = p;
                    block[p] += block[q];
                }
            }
        }
        
        std::vector<int>res;
        for(int i = hits.size() - 1; i >=0; --i){
            int x = hits[i][0];
            int y = hits[i][1];
            if(grid[x][y] == -1){
                res.insert(res.begin(),0);
                continue;
            }
            grid[x][y] = 1;
            int cnt = 0;
            for(const std::pair<int,int>& dir: dire){
                int xc = x + dir.first;
                int yc = y + dir.second;
                if(xc < 0 || xc >= row || yc < 0 || yc >= col || grid[xc][yc] != 1) continue;
                int p = find_root(root, xc * col + yc);
                int q = find_root(root, x * col + y);
                if(p == q) continue;
                if(p / col != 0){
                    cnt += block[p];
                    root[p] = q;
                    block[q] += block[p];
                }
                else{
                    root[q] = p;
                    block[p] += block[q];
                }
            }
            if(find_root(root,x * col + y) / col == 0) res.insert(res.begin(), cnt);
            else res.insert(res.begin(), 0);;
        }
        return res;
    }
};
