class Solution {
public:
    int knightDialer(int N) {
        std::vector<std::vector<int>>dp(4,std::vector<int>(3,1));
        std::vector<std::pair<int,int>>dire({{-2,1},{-1,2},{1,2},{2,1},{2,-1},{1,-2},{-1,-2},{-2,-1}});
        int m = pow(10,9) + 7; 
        for(int step = 0; step < N - 1; ++step){
            std::vector<std::vector<int>>v(4,std::vector<int>(3,0));
            for(int i = 0; i < 4; ++i){
                for(int j = 0; j < 3; ++j){
                    if(dp[i][j] == 0 || (i == 3 && j == 0) || (i == 3 && j == 2)) continue;
                    for(const std::pair<int,int>& dir: dire){
                        int x = i + dir.first;
                        int y = j + dir.second;
                        if(x < 0 || x >= 4 || y < 0 || y >= 3) continue;
                        v[x][y] = (v[x][y] + dp[i][j]) % m;
                    }
                }
            }
            dp = v;
        }
        int res = 0;
        
        dp[3][0] = 0;
        dp[3][2] = 0;
        for(int i = 0; i < 4; ++i){
            for(int j = 0; j < 3; ++j){
                res = (res + dp[i][j]) % m;
            }
        }
        return res;
    }
};
