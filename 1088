class Solution {
public:
    int64_t rev(int64_t d){
        int res = 0;
        while(d){
            int r = d % 10;
            d /= 10;
            if(r == 6) res = res * 10 + 9;
            else if(r == 9) res = res * 10 + 6;
            else res = res * 10 + r;
        }
        return res;
    }
    int confusingNumberII(int N) {
        std::vector<int> dig({0,1,6,8,9});
        std::queue<int> q({0});
        int cnt = 0;
        while(!q.empty()){
            int64_t front = q.front();
            q.pop();
            for(const int& d: dig){
                int64_t num = front * 10 + d;
                if(num <= N && num != 0){
                    q.push(num);
                    if(rev(num) != num) ++cnt;
                }
            }
        }
        return cnt;
    }
};
