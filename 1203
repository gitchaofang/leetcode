class Solution {
public:
    vector<int> sortItems(int n, int m, vector<int>& group, vector<vector<int>>& beforeItems) {
        std::unordered_map<int,std::unordered_set<int>> connect;
        std::unordered_map<int,std::vector<int>> ele;
        for(int i = 0; i < n; ++i){
            if(group[i] == -1){
                ele[m].push_back(i);
                group[i] = m++;
            }
            else ele[group[i]].push_back(i);
        }
        std::vector<int> in(m,0);
        std::vector<std::unordered_map<int,std::unordered_set<int>>> inner_connect(m);
        for(int i = 0; i < n; ++i){
            for(const int& d: beforeItems[i]){
                if(group[i] == group[d]) inner_connect[group[d]][d].insert(i);
                else if(connect[group[d]].find(group[i]) == connect[group[d]].end()){
                    connect[group[d]].insert(group[i]);
                    ++in[group[i]];
                }
            }
        }
        std::queue<int>q;
        for(int i = 0; i < m; ++i){
            if(in[i] == 0) q.push(i);
        }
        std::vector<int>order;
        while(!q.empty()){
            int cur = q.front();
            q.pop();
            order.push_back(cur);
            for(const int& d: connect[cur]){
                --in[d];
                if(in[d] == 0) q.push(d);
            }
        }
        for(const int& d: in) if(d != 0) return {};
        
        std::vector<int>res;
        for(const int& g: order){
            std::unordered_map<int,std::unordered_set<int>>& m = inner_connect[g];
            std::unordered_map<int,int>in;
            for(auto it = m.begin(); it != m.end(); ++it){
                for(const int&d : it -> second) ++in[d];
            }
            for(const int&d : ele[g]){
                if(in.find(d) == in.end()) q.push(d);
            }
            while(!q.empty()){
                int cur = q.front();
                q.pop();
                res.push_back(cur);
                for(const int& d: m[cur]){
                    --in[d];
                    if(in[d] == 0) q.push(d);
                }
            }
            for(const std::pair<int,int>&p : in){
                if(p.second != 0) return {};
            }
        }
        return res;
    }
};
