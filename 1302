class Solution {
public:
    void dfs(TreeNode* root, std::map<int,std::vector<int>>& m, int lev){
        if(!root -> left && !root -> right){
            m[lev].push_back(root -> val);
            return;
        }
        if(root -> left) dfs(root -> left,m,lev+1);
        if(root -> right) dfs(root -> right,m,lev+1);
        return;
    }
    int deepestLeavesSum(TreeNode* root) {
        if(!root) return 0;
        std::map<int,std::vector<int>>m;
        dfs(root,m,0);
        std::vector<int> v = m.rbegin() -> second;
        int res = 0;
        for(const int& d: v) res += d;
        return res;
    }
};
