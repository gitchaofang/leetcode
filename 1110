class Solution {
public:
    void dfs(TreeNode* root, const unordered_set<int>& check,std::vector<TreeNode*>& res){
        int val = root -> val;
        if(check.find(val) != check.end()){
            if(root -> left && check.find(root -> left -> val) == check.end()) res.push_back(root -> left);
            if(root -> right && check.find(root -> right -> val) == check.end()) res.push_back(root -> right);
        }
        if(root -> left){
            dfs(root -> left, check, res);
            if(check.find(root -> left ->val) != check.end()) root -> left = nullptr;
        }
        if(root -> right){
            dfs(root -> right, check, res);
            if(check.find(root -> right -> val) != check.end()) root -> right = nullptr;
        }
        return;
    }
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        if(!root) return {};
        std::unordered_set<int> check (to_delete.begin(),to_delete.end());
        TreeNode* head = new TreeNode(*check.begin());
        head -> left = root;
        std::vector<TreeNode*> res; 
        dfs(head,check,res);
        return res;
    }
};
