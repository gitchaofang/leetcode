class Solution {
public:
    int dfs(std::vector<int>& need, const std::vector<std::vector<int>>& special, int& tot, int& left){
        int res = tot;
        for(int i = 0; i < special.size(); ++i){
            bool valid = true;
            for(int j = 0; j < special[i].size() - 1; ++j){
                if(special[i][j] > need[j]) valid = false;
                need[j] -= special[i][j];
                left -= special[i][j];
            }
            tot += special[i].back();
            if(valid) res = std::min(res, dfs(need, special, tot, left));
            for(int j = 0; j < special[i].size() - 1; ++j){ 
                need[j] += special[i][j];
                left += special[i][j];
            }
            tot -= special[i].back();
        }
        return res;
    }
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        for(int i = 0; i < special.size(); ++i){
            int tot = 0;
            for(int j = 0; j < special[i].size() - 1; ++j) tot += price[j] * special[i][j];
            special[i].back() -= tot;
        }
        
        int tot = 0;
        int left = 0;
        for(int i = 0; i < needs.size(); ++i){ 
            left += needs[i];
            tot += needs[i] * price[i];
        }
        return dfs(needs,special,tot, left);
    }
};
