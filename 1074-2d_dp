class Solution {
public:
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        int row = matrix.size();
        int col = matrix[0].size();
        for(int i = 0; i< row; ++i){
            for(int j = 1; j < col; ++j) matrix[i][j] += matrix[i][j - 1];
        }    
        
        std::unordered_map<int,int>m;
        int res = 0;
        for(int j = 0; j < col; ++j){
            for(int k = j; k < col; ++k){
                m = {{0,1}};
                int sum = 0;
                for(int i = 0; i < row; ++i){
                    sum += matrix[i][k] - (j  !=  0 ? matrix[i][j - 1] : 0);
                    res += m.find(sum - target) != m.end() ? m[sum - target] : 0;
       //             res += m[sum - target];
                    ++m[sum];
                }
            }
        }
        return res;
    }
};
