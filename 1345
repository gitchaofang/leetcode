class Solution {
public:
    int minJumps(vector<int>& arr) {
        if(arr.size() == 1) return 0;
        if(arr[0] == arr.back() || arr.size() == 2) return 1;
        std:unordered_map<int,std::vector<int>>m;
        for(int i = 0; i < arr.size(); ++i) m[arr[i]].push_back(i);
        std::queue<int> q({0});
        int res = 0;
        std::vector<int> visited(arr.size(),0);
        visited[0] = 1;
        while(!q.empty()){
            ++res;
            int d = 0;
            int pos = 0;
            for(int i = q.size(); i > 0; --i){
                pos = q.front();
                q.pop();
                for(int k = m[arr[pos]].size() - 1; k >= 0; --k){
                    d = m[arr[pos]][k];
                    if(visited[d] == 1) continue;
                    if(d + 1 == arr.size()) return res;
                    q.push(d);
                    visited[d] = 1;
                }
                if(pos - 1 >= 0 && visited[pos - 1] == 0){
                    q.push(pos - 1);
                    visited[pos - 1] = 1;
                }
                if(pos + 1 < arr.size() && visited[pos + 1] == 0){
                    if(pos + 2 == arr.size()) return res;
                    q.push(pos + 1);
                    visited[pos + 1] = 1;
                }
                
            }   
        }
        return -1;
    }
};
