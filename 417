class Solution {
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& matrix) {
        int row = matrix.size();
        if(row == 0) return {};
        int col = matrix[0].size();
        std::vector<std::vector<int>> dp(row,std::vector<int>(col,0));
        std::queue<std::pair<int,int>>q;
        for(int j=0; j<col; ++j){
            if(row == 1) dp[0][j] = 3;
            else {
                dp[0][j] = 1;
                dp[row-1][j] = 2;
            }
            q.push({0,j});
            q.push({row-1,j});
        }
        for(int i=0; i<row; ++i){
            if(col == 1) dp[i][0] = 3;
            else{
                dp[i][0] = 1;
                dp[i][col-1] = 2;
            }
            q.push({i,0});
            q.push({i,col-1});
        }
        dp[row-1][0] = 3;
        dp[0][col-1] = 3;
        
        
        std::vector<std::pair<int,int>> dire({{0,-1},{-1,0},{0,1},{1,0}});
        while(!q.empty()){
            std::pair<int,int> p = q.front();
            q.pop();
            for(const std::pair<int,int>& dir: dire){
                int x = p.first + dir.first;
                int y = p.second + dir.second;
                if(x<0 ||x>=row ||y<0 ||y>=col || matrix[x][y] < matrix[p.first][p.second] || dp[x][y] == dp[p.first][p.second] || dp[x][y] == 3 ) continue;
                if(dp[p.first][p.second] == 3) dp[x][y] = 3;
                else dp[x][y] += dp[p.first][p.second];
                q.push({x,y});
            }
        }
        std::vector<std::vector<int>>res;
        for(int i=0; i< row; ++i){
            for(int j=0; j<col; ++j){
                if(dp[i][j]== 3) res.push_back({i,j});
            }
        }
        return res;
    }
};
