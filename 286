class Solution {
public:
    void wallsAndGates(vector<vector<int>>& rooms) {
        int row = rooms.size();
        if(row == 0) return;
        int col = rooms[0].size();
        std::queue<int> q;
        for(int i = 0; i < row; ++i){
            for(int j = 0; j < col; ++j){
                if(rooms[i][j] == 0) q.push(i * col + j);
            }
        }
        
        std::vector<std::pair<int,int>> dire({{0,-1},{-1,0},{0,1},{1,0}});
        while(!q.empty()){
            int cur = q.front();
            q.pop();
            for(const std::pair<int,int>& dir: dire){
                int x = dir.first + cur / col;
                int y = dir.second + cur % col;
                if(x < 0 || x >= row || y < 0 || y >= col || rooms[x][y] == -1 || rooms[x][y] <= rooms[cur / col][cur % col] + 1) continue;
                q.push(x * col + y);
                rooms[x][y] = rooms[cur / col][cur % col]  + 1;
                
            }
        }
        return;
    }
};
