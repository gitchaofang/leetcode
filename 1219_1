class Solution {
public:
    int dfs(std::vector<std::vector<int>>& gold, const int& cur, std::string& pattern, unordered_map<std::string, int>& m){
        std::string str = std::to_string(cur) + '-' + pattern;
        if(m.find(str) != m.end()) return m[str];
        int row = gold.size();
        int col = gold[0].size();
        std::vector<std::pair<int,int>> dire({{0,-1},{-1,0},{0,1},{1,0}});
        int res = 0;
        pattern[cur] = '0';
        for(const std::pair<int,int>& dir: dire){
            int x = dir.first + cur / col;
            int y = dir.second + cur % col;
            if(x < 0 || x >= row || y < 0 || y >= col || pattern[x * col + y] == '0') continue;
            res = std::max(res, dfs(gold, x * col + y, pattern, m));
        }
        pattern[cur] = '1';
        m[str] = res + gold[cur / col][cur % col];
        return m[str];
    }
    int getMaximumGold(vector<vector<int>>& grid) {
        int res = INT_MIN;
        int row = grid.size();
        int col = grid[0].size();
        std::string pattern(row * col,'0');
        std::unordered_map<std::string,int>m;
        for(int i = 0; i < row * col; ++i){
            if(grid[i / col][i % col] != 0) pattern[i] = '1';
        }
        for(int i = 0; i < row * col; ++i){ 
            if(pattern[i] == '0') continue;
            res = std::max(res, dfs(grid, i, pattern, m));
        }
        return res;
    }
};
