class Solution {
public:
    double knightProbability(int N, int K, int r, int c) {
        std::vector<std::vector<double>>dp(N,std::vector<double>(N,0));
        dp[r][c] = 1;
        std::vector<std::pair<int,int>>dire({{-2,1},{-1,2},{1,2},{2,1},{2,-1},{1,-2},{-1,-2},{-2,-1}});
        for(int step = 0; step < K; ++step){
            std::vector<std::vector<double>> v(N,std::vector<double>(N,0));
            for(int i = 0; i < N; ++i){
                for(int j = 0; j < N; ++j){
                    if(dp[i][j] == 0) continue;
                    for(const std::pair<int,int>& dir: dire){
                        int x = i + dir.first;
                        int y = j + dir.second;
                        if(x < 0 || x >= N || y < 0 || y >= N)continue;
                        v[x][y] += dp[i][j];
                    }
                }
            }
            dp = v;
        }
        double res = 0;
        for(int i = 0; i < N; ++i){
            for(int j = 0; j < N; ++j){
                res += dp[i][j];
            }
        }
        return res / double(pow(8.0,K));
    }
};
