class Solution {
public:
    int binary_search(const std::vector<std::vector<char>>& v, int i,int j, const int& low, const int& high, const bool& left, const bool& r){
        while(i < j){
            int mid = i + (j - i) / 2;
            int k = low;
            while(k < high && (r ? v[mid][k] : v[k][mid]) == '0') ++k;
            if(k < high == left) j = mid;
            else i = mid + 1; 
        }
        return j;
    }
    int minArea(vector<vector<char>>& image, int x, int y) {
        int row = image.size();
        int col = image[0].size();
        int up = binary_search(image, 0, x, 0, col, true, true);
        int down = binary_search(image, x + 1, row, 0, col, false, true);
        int lt = binary_search(image, 0, y, up, down, true, false);
        int rt = binary_search(image, y + 1, col, up, down, false, false);
        return (down - up) * (rt - lt);
    }
};
