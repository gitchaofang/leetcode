class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        std::unordered_map<char,int>m;
        for(const char& c: tasks) ++m[c];
        std::priority_queue<int>pq;
        for(auto it = m.begin(); it != m.end(); ++it) pq.push(it -> second);
        int res = 0;
        while(!pq.empty()){
            int cnt= 0;
            std::vector<int>v;
            for(int i = 0; i <=n; ++i){
                if(!pq.empty()){
                    ++cnt;
                    v.push_back(pq.top());
                    pq.pop();
                }
            }
            for(int&d: v){
                if(--d > 0) pq.push(d);
            }
            res += pq.empty() ? cnt : n + 1;
        }
        return res;
    }
};
