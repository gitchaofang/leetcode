class Solution {
public:
    void remove(std::vector<std::vector<int>>& A, const int& cur){
        int row = A.size();
        int col = A[0].size();
        std::vector<std::pair<int,int>> dire({{0,-1},{-1,0},{0,1},{1,0}});
        A[cur / col][cur % col] = 0;
        for(const std::pair<int,int>& dir: dire){
            int x = cur / col + dir.first;
            int y = cur % col + dir.second;
            if(x < 0 || x >= row || y < 0 || y >= col || A[x][y] == 0) continue;
            A[x][y] = 0;
            remove(A, x * col + y);
        }
        return;
    }
    int numEnclaves(vector<vector<int>>& A) {
        int row = A.size();
        int col =A[0].size();
        for(int i = 0; i < row; ++i){
            if(A[i][0] == 1) remove(A, i * col);
            if(A[i][col - 1] == 1) remove(A, i * col + col - 1);
        }
        for(int j = 0; j < col; ++j){
            if(A[0][j] == 1) remove(A, j);
            if(A[row - 1][j] == 1) remove(A, (row - 1) * col + j);
        }
        int res = 0;
        for(int i = 0; i < row * col; ++i) res += (A[i / col][i % col]);
        return res;
    }
};
