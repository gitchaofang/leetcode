class Solution {
public:
    int ways(vector<string>& pizza, int k) {
        int row = pizza.size();
        int col = pizza[0].size();
        std::vector<std::vector<int>> dp(row * col, std::vector<int>(k,0));
        std::vector<int> sm(row * col, 0);
        int mod = std::pow(10,9) + 7;
        for(int i = row - 1; i >= 0; --i){
            int cnt = 0;
            for(int j = col - 1; j >= 0; --j){
                cnt += (pizza[i][j] == 'A');
                if(i + 1 < row) sm[i * col + j] = sm[(i + 1) * col + j] + cnt;
                else sm[i * col + j] = cnt;
            }
        }
        dp[0][0] = 1;
        for(int i = 1; i < row * col; ++i){
            if(sm[i] == 0) continue;
            int x = i / col;
            int y = i % col;
            for(int j = 1; j < k; ++j){
                /*up*/
                for(int l = x - 1; l >=0; --l){
                    if(sm[l * col + y] == sm[i]) continue;
                    dp[i][j] = (dp[i][j] + dp[l * col + y][j - 1]) % mod;
                }
                /*left*/
                for(int l = y - 1; l >= 0; --l){
                    if(sm[x * col + l] == sm[i]) continue;
                    dp[i][j] = (dp[i][j] + dp[x * col + l][j - 1]) % mod;
                }
            }
        }
        int res = 0;
        for(int i = 0; i < row* col; ++i) res = (res + dp[i][k - 1]) % mod;
        return res;
    }
};
