class Solution {
public:
    int find_root(const std::vector<int>& root, const int& d){
        return (d == root[d]) ? d : find_root(root,root[d]);
    }
    int numIslands(vector<vector<char>>& grid) {
        int row = grid.size();
        if(row == 0) return 0;
        int col = grid[0].size();
        std::vector<int> root(row * col);
        for(int i = 0; i < row*col; ++i) root[i] = i;
        std::vector<std::pair<int,int>> dire({{0,-1},{-1,0},{0,1},{1,0}});
        
        for(int i = 0; i < row; ++i){
            for(int j = 0; j < col; ++j){
                if(grid[i][j] == '0') continue;
                int p = find_root(root,i*col + j);
                for(const std::pair<int,int>& dir: dire){
                    int x = i + dir.first;
                    int y = j + dir.second;
                    if(x < 0 || x >= row || y < 0 || y >= col || grid[x][y] == '0') continue;
                    int q = find_root(root,x * col + y);
                    if(p!=q) root[q] = p;
                }
            }
        }
        
        int cnt = 0;
        for(int i = 0; i < row; ++i){
            for(int j = 0; j < col; ++j){
                if(grid[i][j] == '0') continue;
                cnt += (root[i * col + j] == i * col + j);
            }
        }
        return cnt;
    }
};
