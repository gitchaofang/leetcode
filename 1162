class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        std::vector<int> dp(row * col, INT_MAX);
        std::queue<int> q;
        for(int i = 0; i < row*col; ++i){
            if(grid[i / col][i % col] == 1){
                q.push(i);
                dp[i] = 0;
            }
        }
        std::vector<std::pair<int,int>> dire({{0,-1},{-1,0},{0,1},{1,0}});
        if(q.empty()) return -1;
        while(!q.empty()){
            int cur = q.front();
            q.pop();
            for(const std::pair<int,int>& dir: dire){
                int x = dir.first + cur /col;
                int y = dir.second + cur % col;
                if(x < 0 || x >= row || y < 0 || y >= col || grid[x][y] == 1) continue;
                int d = 1 + dp[cur];
                if(dp[x* col + y] <= d) continue;
                dp[x * col + y] = d;
                q.push(x * col + y);
            }
        }
        int res = INT_MIN;
        for(int i = 0; i < row * col; ++i){
            if(grid[i / col][i % col] == 1) continue; 
            res = std::max(res, dp[i]);
        }
        return  (res == INT_MIN) ? -1 : res;
    }
};
