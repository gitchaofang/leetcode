class Solution {
public:
    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {
        std::map<int, std::vector<std::pair<int,int>>>m;
        for(const std::vector<int>& v: buildings){
            m[v[0]].push_back({v[2],1});
            m[v[1]].push_back({v[2],-1});
        }
        std::map<int,int> cntm;
        int high = 0;
        std::vector<std::vector<int>> res;
        for(auto it = m.begin(); it != m.end(); ++it){
            for(const std::pair<int,int>&p: it -> second){
                cntm[p.first] += p.second;
                if(cntm[p.first] == 0) cntm.erase(p.first);
            }
            if(cntm.empty()) res.push_back({it -> first, 0});
            else if(cntm.rbegin() -> first != high){
                res.push_back({it -> first, cntm.rbegin() -> first});
                high = cntm.rbegin() -> first;
            }
            
        }
        return res;
    }
};
