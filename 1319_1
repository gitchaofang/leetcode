class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(connections.size() < n - 1) return -1;
        std::vector<int> visited(n,-1);
        int cnt = 0;
        std::vector<std::vector<int>> nb(n);
        for(const std::vector<int>& v: connections){
            nb[v[1]].push_back(v[0]);
            nb[v[0]].push_back(v[1]);
        }
        for(int i = 0; i < n; ++i){
            if(visited[i] != -1) continue;
            ++cnt;
            std::queue<int> q({i});
            while(!q.empty()){
                int cur = q.front();
                q.pop();
                for(const int& d: nb[cur]){
                    if(visited[d] != -1) continue;
                    q.push(d);
                    visited[d] = 1;
                }
            }
        }
        return cnt - 1;
    }
};
