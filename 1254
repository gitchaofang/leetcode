class Solution {
public:
    void remove(std::vector<std::vector<int>>& grid, const int& cur){
        int row = grid.size();
        int col = grid[0].size();
        std::vector<std::pair<int,int>> dire({{0,-1},{-1,0},{0,1},{1,0}});
        std::queue<int>q({cur});
        grid[cur / col][cur % col] = 1;
        while(!q.empty()){
            int pos = q.front();
            q.pop();
            for(const std::pair<int,int>& dir: dire){
                int x = dir.first + pos / col;
                int y = dir.second + pos % col;
                if(x < 0 || x >= row || y < 0 || y >= col || grid[x][y] == 1) continue;
                grid[x][y] = 1;
                q.push(x * col + y);
            }
        }
        return;
    }
    int find_root(const std::vector<int>& root, const int& d){
        return (root[d] == d) ? d : find_root(root, root[d]);
    }
    int closedIsland(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        for(int i = 0; i < row; ++i){
            if(grid[i][0] == 0) remove(grid, i* col);
            if(grid[i][col - 1] == 0) remove(grid, i * col + col - 1);
        }       
        for(int i = 0; i < col; ++i){
            if(grid[0][i] == 0) remove(grid, i);
            if(grid[row - 1][i] == 0) remove(grid, (row - 1) * col + i); 
        } 
        std::vector<int> root(row * col);
        for(int i = 0; i < row * col; ++i) root[i] = i;
        std::vector<std::pair<int,int>> dire({{0,-1},{-1,0},{0,1},{1,0}});
        for(int i = 0; i < row * col; ++i){
            if(grid[i / col][i % col] == 1) continue;
            for(const std::pair<int,int>& dir: dire) {
                int x = i / col + dir.first;
                int y = i % col + dir.second;
                if(x < 0 || x >= row || y < 0 || y >= col || grid[x][y] == 1) continue;
                int p = find_root(root, i);
                int q = find_root(root, x * col + y);
                root[p] = q;
            }
        }
        int cnt = 0;
        for(int i = 0; i < col * row; ++i){
            if(grid[i / col][i % col] == 1) continue;
            cnt += (root[i] == i);
        }
        return cnt;
    }
};
