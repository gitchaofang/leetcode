class Solution {
public:
    void dfs(TreeNode*& node, const std::unordered_set<int>& st, std::vector<TreeNode*>& res){
        if(node == nullptr)return;
        int d = node -> val;
        if(st.find(d) != st.end()){
            if(node -> left  && st.find(node -> left -> val) == st.end()) res.push_back(node -> left);
            if(node -> right && st.find(node -> right -> val) == st.end()) res.push_back(node -> right);
            
        }
        dfs(node -> left,st,res);
        dfs(node -> right,st,res);
        if(st.find(d) != st.end()) node = nullptr;
        return;
    }
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        if(!root) return {};
        std::unordered_set<int> st(to_delete.begin(),to_delete.end());
        std::vector<TreeNode*> res;
        if(st.find(root -> val) == st.end()) res.push_back(root);
        dfs(root,st,res);
        return res;
    }
};
