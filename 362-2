class HitCounter {
public:
    /** Initialize your data structure here. */
    HitCounter():sum(0),pre(0) {
        
    }
    
    /** Record a hit.
        @param timestamp - The current timestamp (in seconds granularity). */
    void hit(int timestamp) {
        ++sum;
        m[timestamp] = sum; 
    }
    
    /** Return the number of hits in the past 5 minutes.
        @param timestamp - The current timestamp (in seconds granularity). */
    int getHits(int timestamp) {
        if(m.empty()) return 0;
        if(m.begin() -> first > timestamp - 300) return sum - pre;
        auto it = m.lower_bound(timestamp - 300);
        if(it -> first == timestamp - 300){
            pre = it -> second;
            m.erase(m.begin(), ++it);
            return sum - pre;
        }
        it = std::prev(it);
        pre = it -> second;
        ++it;
        m.erase(m.begin(),it);
        return sum - pre;
        
    }
private:
    std::map<int,int>m;
    int sum;
    int pre;
};

/**
 * Your HitCounter object will be instantiated and called as such:
 * HitCounter* obj = new HitCounter();
 * obj->hit(timestamp);
 * int param_2 = obj->getHits(timestamp);
 */
