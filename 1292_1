class Solution {
public:
    bool check(const std::vector<std::vector<int>>& sm, const int& l, const int& thred){
        int row = sm.size();
        int col = sm[0].size();
        for(int i = 1; i + l - 1 < row; ++i){
            for(int j = 1; j + l - 1 < col; ++j){
                int low_i = i + l - 1;
                int low_j = j + l - 1;
                if(sm[low_i][low_j] + sm[i - 1][j - 1] - sm[low_i][j - 1] - sm[i - 1][low_j] <= thred) return true;
            }
        }
        return false;
    }
    int maxSideLength(vector<vector<int>>& mat, int threshold) {
        int row = mat.size();
        int col = mat[0].size();
        std::vector<std::vector<int>> sm(row + 1, std::vector<int>(col + 1, 0));
        for(int i = 1; i <= row; ++i){
            int cnt = 0;
            for(int j = 1; j <= col; ++j){
                cnt += mat[i - 1][j - 1];
                sm[i][j] = (i == 1 ? 0 : sm[i - 1][j]) + cnt;
            }
        }
        
        int left = 1;
        int right = std::min(row, col);
        while(left < right){
            int mid = left + (right - left) /2;
            if(check(sm, mid, threshold)) left = mid + 1;
            else right = mid;
        }
        if(check(sm,left,threshold)) return left;
        return check(sm, left - 1, threshold) ? left -1: 0;
    }
};
