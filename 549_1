lass Solution {
public:
    std::pair<int,int> dfs(TreeNode* root, int& res){
        if(!root) return {0,0};
        std::pair<int,int> left = dfs(root -> left, res);
        std::pair<int,int> right = dfs(root -> right, res);
        int down = 1;
        int up = 1;
        int long_up = 1;
        int long_down = 1;
        int d = root -> val;
        if(root -> left){
            if(root -> left -> val == d - 1){ 
                down += left.first;
                long_down = std::max(long_down, left.first + 1);
            }
            else if(root -> left -> val == d + 1){ 
                up += left.second;
                long_up = std::max(long_up, left.second + 1);
            }
        }
        if(root -> right){
            if(root -> right -> val == d + 1){ 
                down += right.second;
                long_up = std::max(long_up, right.second + 1);
            }
            else if(root -> right -> val == d - 1){ 
                up += right.first;
                long_down = std::max(long_down, right.first + 1);
            }
        }
        res = std::max(std::max(res,down), up);
        return {long_down,long_up};
        
    }
    int longestConsecutive(TreeNode* root) {
        int res = 0;
        dfs(root, res);
        return res;
    }
};
