class Solution {
public:
    int closedIsland(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        int cnt = 0;
        std::vector<std::pair<int,int>> dire({{0,-1},{-1,0},{0,1},{1,0}});
        for(int i = 0; i < row; ++i){
            for(int j = 0; j < col; ++j){
                if(grid[i][j] == 1) continue;
                bool sucess = true;
                std::queue<int> q({i * col + j});
                grid[i][j] == 1;
                while(!q.empty()){
                    int cur = q.front();
                    q.pop();
                    if(cur / col == 0 || cur / col == row - 1 || cur % col == 0 || cur % col == col - 1) sucess = false;
                    
                    for(const std::pair<int,int>& dir: dire){
                        int x = dir.first + cur / col;
                        int y = dir.second + cur % col;
                        if(x < 0 || x >= row || y < 0 || y >= col || grid[x][y] == 1) continue;
                        grid[x][y] = 1;
                        q.push(x * col + y);
                    }
                }
                if(sucess == true){ 
                    ++cnt;
                }
            }
        }
        return cnt;
    }
};
