struct cmp{
    bool operator()(const std::pair<int,int>& p1, const std::pair<int,int>& p2){
        return p1.first > p2.first;
    }
};
class Solution {
public:
    int swimInWater(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        std::priority_queue<std::pair<int,int>, std::vector<std::pair<int,int>>,cmp> q;
        q.push({grid[0][0],0});
        grid[0][0] = -1;
        std::vector<std::pair<int,int>> dire({{0,-1},{-1,0},{0,1},{1,0}});
        int t = -1;
        while(true){
            ++t;
            while(!q.empty() && q.top().first <= t){
                std::pair<int,int> p = q.top();
                q.pop();
                if(p.second / col == row - 1 && p.second % col == col - 1) return t;
                for(const std::pair<int,int>& dir: dire){
                    int x = p.second / col + dir.first;
                    int y = p.second % col + dir.second;
                    if(x < 0 || x >= row || y < 0 || y >= col || grid[x][y] == -1) continue;
                    
                    q.push({grid[x][y], x * col + y});
                    grid[x][y] = -1;
                }
            }
        }
        return -1;
    }
};
