class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        std::vector<std::pair<int,int>>dire({{0,-1},{-1,0},{0,1},{1,0}});
        std::queue<pair<int,int>>q;
        for(int i=0; i<row; ++i){
            for(int j=0; j<col; ++j){
                if(grid[i][j] == 1) q.push({i,j});
            }
        }
        int min = 0;
        while(!q.empty()){
            ++min;
            int n = q.size();
            std::vector<std::vector<int>>v = grid;
            for(int i=0; i<n; ++i){
                std::pair<int,int>p = q.front();
                q.pop();
                bool change = false;
                for(const std::pair<int,int>& dir: dire){
                    int x = p.first + dir.first;
                    int y = p.second + dir.second;
                    if(x<0 || x >= row || y<0 || y>=col || grid[x][y] != 2) continue;  
                    v[p.first][p.second] = 2;
                    change = true;
                    break;
                }
                if(change == false) q.push({p.first,p.second});
            }
            if(q.size() == n) return -1;
            grid = v;
        }
        return min;
    }
};
