class Solution {
public:
    bool dc(const std::unordered_set<std::string>& st, const std::string& str){
        if(str == "") return true;
        int n = str.size();
        for(int i=0; i<n; ++i){
            std::string ss = str.substr(0,i+1);
            if(st.find(ss) == st.end()) continue;
            bool found = dc(st,str.substr(i+1));
            if(found) return true;
        }
        return false;
    }
    
    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {
        auto cmp = [](const std::string& str1, const std::string& str2){
            return str1.size() < str2.size();
        };
        std::sort(words.begin(),words.end(),cmp);
        std::unordered_set<std::string>st;
        std::vector<std::string> res;
        for(const std::string& str: words){
            int n = str.size();
            for(int i=0; i<n-1; ++i){
                bool found1 = dc(st,str.substr(0,i+1));
                bool found2 = dc(st,str.substr(i+1));
                if(found1 && found2){
                    res.push_back(str);
                    break;
                }
            }        
            st.insert(str);
        }
        return res;
    }
};
