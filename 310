class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if(n == 1) return {0};
        std::vector<std::unordered_set<int>>bond(n);
        for(const std::vector<int>& v: edges){
            bond[v[0]].insert(v[1]);
            bond[v[1]].insert(v[0]);
        }
        std::queue<int> q;
        for(int i = 0; i < n; ++i){
            if(bond[i].size() == 1) q.push(i);
        }
        
        while(n > 2){
            for(int i = q.size(); i > 0; --i){
                int cur = q.front();
                q.pop();
                --n;
                for(const int& d: bond[cur]){
                    bond[d].erase(cur);
                    if(bond[d].size() == 1) q.push(d);
                }
            }
        }
        std::vector<int>res;
        while(!q.empty()){
            res.push_back(q.front());
            q.pop();
        }
        return res;
    }
};
