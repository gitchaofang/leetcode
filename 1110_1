class Solution {
public:
    bool dfs(TreeNode* root, const std::unordered_set<int>& del,std::vector<TreeNode*>& res){
        if(!root) return false;
        bool left = dfs(root -> left, del,res);
        bool right = dfs(root -> right, del,res);
        if(left){
            if(root -> left -> left) res.push_back(root -> left -> left);
            if(root -> left -> right) res.push_back(root -> left -> right);
            root -> left = nullptr;
        }
        if(right){
            if(root -> right -> left) res.push_back(root -> right -> left);
            if(root -> right -> right) res.push_back(root -> right -> right);    
            root -> right = nullptr;
        }
        if(del.find(root -> val) != del.end()) return true;
        return false;
    }
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        std::unordered_set<int> del(to_delete.begin(),to_delete.end());
        TreeNode* pre = new TreeNode(0);
        std::vector<TreeNode*> res;
        pre -> left = root;
        dfs(pre,del,res);
        if(pre -> left) res.push_back(pre -> left);
        return res;
    }
};
