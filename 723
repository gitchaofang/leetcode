class Solution {
public:
    vector<vector<int>> candyCrush(vector<vector<int>>& board) {
        int row = board.size();
        int col = board[0].size();
        while(true){
            std::vector<std::pair<int,int>> crush;
            for(int i = 0; i < row; ++i){
                for(int j = 0; j < col; ++j){
                    if(board[i][j] <= 0) continue;
                    int head = i;
                    int tail = i;
                    while(head >= 0 && abs(board[head][j]) == board[i][j]) --head;
                    while(tail < row && abs(board[tail][j]) == board[i][j]) ++tail;
                    if(tail - head > 3){
                        for(int s = head + 1; s < tail; ++s){
                            board[s][j] *= -1;
                            crush.push_back({s,j});
                        }
                    }
                    head = j;
                    tail = j;
                    while(head >= 0 && abs(board[i][head]) == board[i][j]) --head;
                    while(tail < col && abs(board[i][tail]) == board[i][j]) ++tail;
                    if(tail - head > 3){
                        for(int s = head + 1; s < tail; ++s){
                            board[i][s] *= -1;
                            crush.push_back({i,s});
                        }
                    }
                }
            }
            if(crush.size() == 0) return board;
            for(const std::pair<int,int>& p: crush) board[p.first][p.second] = 0;
            for(int j = 0; j < col; ++j){
                int head = row - 1;
                int tail = row - 1;
                while(head >= 0){
                    if(board[head][j] != 0) std::swap(board[head][j], board[tail--][j]);
                    --head;
                }
            }
        }
        return board;
    }
};
