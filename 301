class Solution {
public:
    bool check(std::string& str){
        int cnt = 0;
        for(int i=0; i<str.size(); ++i){
            if(str[i] == '(') ++cnt;
            else if(str[i] == ')' && --cnt < 0) return false;
        }
        return cnt == 0;
    }
    vector<string> removeInvalidParentheses(string s) {
        std::queue<std::string>q({s});
        std::unordered_set<std::string> visited({s});
        bool found = false;
        std::vector<std::string> res;
        while(!q.empty()){
            int n = q.size();
            for(int i=0; i<n; ++i){
                std::string str = q.front();
                q.pop();
                if(check(str)){
                    found = true;
                    res.push_back(str);
                }
                if(found == true) continue;
                for(int j=0; j<str.size(); ++j){
                    if(str[j]!='(' && str[j] != ')') continue;
                    std::string ss = str.substr(0,j) + str.substr(j+1);
                    if(visited.find(ss) != visited.end()) continue;
                    q.push(ss);
                    visited.insert(ss);
                }
            }
        }
        return res;
    }
};
