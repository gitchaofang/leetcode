class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int row = grid.size();
        if(row == 0) return 0;
        int col = grid[0].size();
        std::vector<std::vector<int>> dp(row,std::vector<int>(col,INT_MAX));
        dp[row-1][col-1] = grid[row-1][col-1];
        std::queue<std::pair<int,int>>q({{row-1,col-1}});
        std::vector<std::pair<int,int>>dire({{-1,0},{0,-1}});
        while(!q.empty()){
            std::pair<int,int>p = q.front();
            q.pop();
            int val = dp[p.first][p.second];
            for(const std::pair<int,int>& dir: dire){
                int x = p.first + dir.first;
                int y = p.second + dir.second;
                if(x <0||y<0 || x>=row || y>= col || val + grid[x][y] >= dp[x][y]) continue;
                dp[x][y] = val + grid[x][y];
                q.push({x,y});
            }
        }
        return dp[0][0];
    }
};
