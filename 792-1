class Solution {
public:
    int bs(const std::vector<int>& v, const int& cur){
        int left = 0;
        int right = v.size() - 1;
        while(left < right){
            int mid = left + (right - left) / 2;
            if(v[mid] > cur) right = mid;
            else left = mid +1;
        }
        return (v[left] <= cur) ? 0 : v[left];
    }
    bool check(const std::vector<std::vector<int>>& m, const std::string& str){
        int cur = -1;
        for(int i=0; i<str.size(); ++i){
            std::cout << i <<' ';
            int c = str[i] - 'a';
            if(m[c].size() == 0) return false;
            int pos = bs(m[c],cur);
            if(pos <= cur) return false;
            cur = pos;
        }
        std::cout << '\n';
        return true;
    }
    int numMatchingSubseq(string S, vector<string>& words) {
        std::vector<std::vector<int>> m(26,std::vector<int>());
        int len = S.size();
        for(int i=0; i<len; ++i) m[S[i] - 'a'].push_back(i);
        int res = 0;
        for(const std::string& str: words){
            if(check(m,str)){ 
                ++res;
            }
        }
        return res;
    }
};
