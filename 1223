class Solution {
public:
    int dieSimulator(int n, vector<int>& rollMax) {
        std::vector<std::vector<uint32_t>>dp(7);
        for(int i=1; i<7; ++i)dp[i].resize(rollMax[i-1] + 1,0);  
        int32_t mx = std::pow(10,9) + 7;
        for(int i=1; i<7; ++i) dp[i][0] = 1;
        for(int step=0; step<n; ++step){
            std::vector<uint32_t> tot(7,0);
            for(int i=1; i<7; ++i){
                for(int j = dp[i].size()-1; j>=1; --j){
                    dp[i][j] = dp[i][j-1];
                    tot[i] = (tot[i] + dp[i][j]) % mx;
                }      
            }
            for(int i = 1; i<7; ++i){ 
                dp[i][0] = 0;
                for(int j=1; j<i; ++j) dp[i][0] = (dp[i][0] + tot[j]) % mx;
                for(int j=i+1; j<7; ++j) dp[i][0] = (dp[i][0] + tot[j]) % mx;
            }
        }
        int32_t res=0;
        for(int i=1; i<7; ++i){
            for(int j=1; j<dp[i].size(); ++j){ 
                res = (res + dp[i][j]) % mx;
            }
        }
        return res;
    }
};
