class Solution {
public:
    int cherryPickup(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        std::vector<std::vector<int>> dp(row * col, std::vector<int>(row * col, 0));
        std::queue<std::pair<int,int>> q({{0, col - 1}});
        dp[0][col - 1] = grid[0][0] + grid[0][col - 1];
        std::vector<std::pair<int,int>> dire({{1,-1},{1,0},{1,1}});
        int res = 0;
        while(!q.empty()){
            std::pair<int,int> cur = q.front();
            q.pop();
            if(cur.first / col == row - 1 && cur.second / col == row - 1) res = std::max(res, dp[cur.first][cur.second]);
            for(const std::pair<int,int>& dir_1: dire){
                for(const std::pair<int,int>& dir_2: dire){
                    int x1 = cur.first / col + dir_1.first;
                    int y1 = cur.first % col + dir_1.second;
                    int x2 = cur.second / col + dir_2.first;
                    int y2 = cur.second % col + dir_2.second;
                    if(x1 < 0 || x2 < 0  || x1 >= row || x2 >= row || y1 < 0 || y2 <0 || y1 >= col || y2 >= col) continue;
                    int d = dp[cur.first][cur.second] + grid[x1][y1] + grid[x2][y2];
                    if(x1 == x2 && y1 == y2) d -= grid[x1][y1];
                    if(d <= dp[x1 * col + y1][x2 * col + y2]) continue;
                    dp[x1 * col + y1][x2 * col + y2] = d;
                    q.push({x1 * col + y1, x2 * col + y2});
                }
            }
        }
        return res;
    }
};
