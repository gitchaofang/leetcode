class Solution {
public:
    void next(const std::vector<int>& visited, int& pos){
        while(pos < visited.size() && visited[pos] == 1) ++pos;
        return;
    }
    bool isPossible(vector<int>& nums) {
        int len = nums.size();
        std::vector<int> visited(len,0);
        std::unordered_map<int,std::set<int>> res;
        int cur = 0;
        while(cur < len){
            std::vector<int>tv({cur});
            visited[cur] = 1;
            int pos = cur;
            for(int i=0; i<2; ++i){
                int tp = pos;
                while(tp < len && nums[tp] == nums[pos]) ++tp;
                next(visited,tp);
                if(tp >= len || nums[tp] != nums[pos] + 1) break;
                pos = tp;
                tv.push_back(pos);
                visited[pos] = 1;
            }
            std::cout << cur << " " << tv.size() << '\n';
             if(tv.size() == 3) res[nums[pos]].insert(pos);
            else{
                int d = nums[cur] - 1;
                if(res.find(d) == res.end()) return false;
                bool found = false;
                for(auto it = res[d].begin(); it != res[d].end(); ++it){
                    if(*it < cur){
                        res[d].erase(it);
                        found = true;
                        res[nums[tv.back()]].insert(tv.back());
                    }
                }
                if(found == false) return false;
            }
            next(visited,++cur);
        }
        return true;
    }
};
