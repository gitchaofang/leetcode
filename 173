class BSTIterator {
public:
    void update(std::stack<TreeNode*>& st){
        while(st.top()->left) st.push(st.top() -> left);
        return;
    }
    BSTIterator(TreeNode* root) {
        if(root){
            st.push(root);
            update(st);
        }
    }
    
    /** @return the next smallest number */
    int next() {
        TreeNode* head = st.top();
        st.pop();
        if(!head -> right) return head -> val;
        st.push(head -> right);
        update(st);
        return head -> val;
    }
    
    /** @return whether we have a next smallest number */
    bool hasNext() {
        return !st.empty();   
    }
private:
    std::stack<TreeNode*> st;
};
