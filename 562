class Solution {
public:
    int longestLine(vector<vector<int>>& M) {
        int row = M.size();
        if(row == 0) return 0;
        int col = M[0].size();
        std::vector<std::vector<std::vector<int>>> dp(row,std::vector<std::vector<int>>(col,std::vector<int>(4,0)));
        int res = 0;
        for(int i=0; i<row; ++i){
            for(int j=0; j<col; ++j){
                if(M[i][j] == 0) continue;
                //horizontal
                dp[i][j][0] = 1;
                if(j > 0) dp[i][j][0] += dp[i][j-1][0];
                //vertical
                dp[i][j][1] = 1;
                if(i > 0) dp[i][j][1] += dp[i-1][j][1];
                //diag
                dp[i][j][2] = 1;
                if(i>0 && j>0) dp[i][j][2] += dp[i-1][j-1][2];
                //anti_diag
                dp[i][j][3] = 1;
                if(i > 0 && j < col - 1) dp[i][j][3] += dp[i-1][j+1][3];
                res = std::max(res,std::max(dp[i][j][0],dp[i][j][1]));
                res = std::max(res,std::max(dp[i][j][2],dp[i][j][3]));
            }
        }
        return res;
    }
};
