class Solution {
public:
    std::pair<int,int> bfs(const std::string& s, std::queue<std::pair<int,int>>& q){
        std::pair<int,int> res;
        while(!q.empty()){
            res = q.front();
            int n = q.size();
            for(int i=0; i<n; ++i){
                std::pair<int,int>p = q.front();
                q.pop();
                if(p.first == 0 || p.second == s.size()-1 || s[p.first-1]!=s[p.second+1]) continue;
                q.push({p.first-1, p.second+1});
            }
        }
        return res;
    }
    string longestPalindrome(string s) {
        std::queue<std::pair<int,int>>q;
        for(int i=0; i<s.size(); ++i) q.push({i,i});
        std::pair<int,int>p = bfs(s,q);
        std::string res = s.substr(p.first, p.second - p.first + 1);
        for(int i=1; i<s.size(); ++i){
            if(s[i] != s[i-1]) continue;
            q.push({i-1,i});
        }
        p = bfs(s,q);
        if(p.second - p.first + 1 > res.size()) res = s.substr(p.first, p.second - p.first + 1);
        return res;
    }
};
