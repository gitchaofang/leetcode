class Solution {
public:
    int getroot(const std::vector<int>& root, const int& d){
        return (root[d] == d) ? d : getroot(root,root[d]);
    }
    int minimumCost(int N, vector<vector<int>>& connections) {
        auto cmp = [](const std::vector<int>& v1, const std::vector<int>& v2){
            return v1[2] < v2[2];
        };
        std::sort(connections.begin(),connections.end(),cmp);
        std::vector<int> root(N + 1);
        for(int i = 1; i <= N; ++i) root[i] = i;
        int cnt = 0;
        int res = 0;
        for(const std::vector<int>& v: connections){
            int q = getroot(root,v[0]);
            int p = getroot(root,v[1]);
            if(q == p) continue;
            root[p] = q;
            ++cnt;
            res += v[2];
            if(cnt == N -1) return res;
        }
        return -1;
    }
};
