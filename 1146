class SnapshotArray {
public:
    SnapshotArray(int length):sp(-1) {
        cache.resize(length);
        for(int i=0; i<length; ++i){ 
            cache[i].push_back({-2,0}); 
            cache[i].push_back({-1,0});
        }
        ind.resize(length,0);
    }
    
    void set(int index, int val) {
        cache[index].front().second = val;
        if(ind[index] == 0){
            ind[index] = 1;
            update.push(index);
        }
        return;
    }
    
    int snap(){
        ++sp;
        while(!update.empty()){
            int pos = update.top();
            update.pop();
            ind[pos] = 0;
            cache[pos].push_back({sp, cache[pos].front().second});
        }
        return sp;
    }
    
    int get(int index, int snap_id) {
        if(snap_id >= cache[index].back().first) return cache[index].back().second;
        int pos = binary_search(index,snap_id);
        return cache[index][pos - 1].second;
    }
    int binary_search(const int& index, const int& snap_id){
        int left = 1;
        int right = cache[index].size();
        while(left < right){
            int mid = left + (right - left) / 2;
            if(cache[index][mid].first == snap_id) return mid + 1;
            if(cache[index][mid].first < snap_id) left = mid + 1;
            else right = mid;
        }
        return left;
    }
private:
    std::vector<std::vector<std::pair<int,int>>> cache;
    std::vector<int> ind;
    std::stack<int> update;
    int sp;
};
