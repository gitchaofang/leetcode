class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.size();
        int n = word2.size();
        std::vector<std::vector<int>> dp(n + 1, std::vector<int>(m + 1, INT_MAX));
        for(int i = 0; i <= n; ++i){
            for(int j = 0; j <= m; ++j){
                if(j == 0){ 
                    dp[i][j] = i;
                    continue;
                }
                if(i == 0){
                    dp[i][j] = j;
                    continue;
                }
                if(word1[j - 1] == word2[i - 1]) dp[i][j] = dp[i - 1][j - 1];
                else dp[i][j] = dp[i - 1][j - 1] + 1;
                dp[i][j] = std::min(dp[i][j], std::min(dp[i][j - 1], dp[i - 1][j]) + 1);  
            }
        }
        return dp[n][m];
    }
};
