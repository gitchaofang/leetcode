class Solution {
public:
    int shortestPathAllKeys(vector<string>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        int n = row * col;
        std::unordered_set<std::string>visited;
        std::queue<std::pair<int,int>>q;
        int keyn = 0;
        for(int i = 0; i < row; ++i){
            for(int j = 0; j < col; ++j){
                if(grid[i][j] == '@'){
                    q.push({i * col + j, 0});
                    visited.insert(std::to_string(i * col + j) + "-" + std::to_string(0));
                }
                else if(grid[i][j] >= 'a' && grid[i][j] <= 'f') ++keyn;
            }
        }
        int cnt = 0;
        std::vector<std::pair<int,int>> dire({{0,-1},{-1,0},{0,1},{1,0}});
        while(!q.empty()){
            ++cnt;
            for(int i = q.size(); i > 0; --i){
                std::pair<int,int> p = q.front();
                q.pop();
                for(const std::pair<int,int>& dir: dire){
                    int x = p.first / col + dir.first;
                    int y = p.first % col + dir.second;
                    if(x < 0 || x >= row || y < 0 || y >=col || grid[x][y] == '#') continue;
                   
                    int key = p.second;
                    char c = grid[x][y];
                    if(c >= 'a' && c <= 'f'){ 
                        key |= 1 << (c - 'a');
                        if(key == (1 << keyn) - 1) return cnt;
                    }
                    if(c >= 'A' && c <= 'F' && ((key >> (c - 'A')) & 1) == 0) continue;
                                               
                   
                    std::string str = std::to_string(x * col + y) + '-' + std::to_string(key);
                    if(visited.find(str) == visited.end()){
                        q.push({x * col + y, key});
                        visited.insert(str);
                    }
                }
            }
        }
        return -1;
    }
};
