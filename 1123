class Solution {
public:
    int test(TreeNode* root,int lev){
        if(!root->left && !root -> right) return lev;
        int left = lev;
        if(root -> left) left = test(root -> left,lev + 1);
        int right = lev;
        if(root -> right) right = test(root -> right, lev + 1);
        return std::max(left,right);
    }
    TreeNode* dfs(TreeNode* root,int lev, int dep){
        if(!root -> left && !root -> right){
            if(lev == dep) return root;
            return nullptr;
        }
        TreeNode* left = nullptr;
        if(root -> left) left = dfs(root -> left, lev + 1, dep);
        TreeNode* right = nullptr;
        if (root -> right) right = dfs(root -> right, lev + 1, dep);
        if(left && right) return root;
        if(left) return left;
        return right;
    }
    TreeNode* lcaDeepestLeaves(TreeNode* root) {
        if(!root) return root;
        int dep = test(root,0);
        return dfs(root, 0, dep);
    }

};
