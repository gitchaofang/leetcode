public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        std::vector<std::vector<int>> bond(n + 1);
        std::vector<int> in(n + 1,0);
        for(const std::vector<int>& v: edges){
            ++in[v[0]];
            ++in[v[1]];
            bond[v[0]].push_back(v[1]);
            bond[v[1]].push_back(v[0]);
        }
        std::queue<int> q;
        for(int i = 1; i <= n; ++i){
            if(in[i] == 1) q.push(i);
        }
       
        while(!q.empty()){
            for(int i = q.size(); i > 0; --i){
                int cur = q.front();
                q.pop();
                for(const int& d: bond[cur]){
                    --in[d];
                    if(in[d] == 1) q.push(d);
                }
            }
        }
        
   
        for(int i = edges.size() - 1; i >= 0; --i){
            if(in[edges[i][0]] == 2 && in[edges[i][1]] == 2) return edges[i];
        }
        return {};
    }
};
