class Solution {
public:
    vector<string> findStrobogrammatic(int n) {
        std::vector<std::pair<char,char>> dig({{'0','0'},{'6','9'}, {'1','1'},{'8','8'},{'9','6'}});  
        if(n == 1) return {"0","1","8"};
        std::queue<std::string>q;
        if(n % 2 == 1){
            q.push("0");
            q.push("1");
            q.push("8");
        }
        else q.push("");
        for(int i = 2; i <= n; i+=2){
            for(int j = q.size(); j > 0; --j){
                std::string str = q.front();
                q.pop();
                for(const std::pair<char,char>& p: dig){
                    std::string s = str;
                    s.insert(s.begin(),p.first);
                    s.insert(s.end(),p.second);
                    q.push(s);
                }
            }
        }
        std::vector<std::string> res;
        while(!q.empty()){
            if(q.front()[0] != '0') res.push_back(q.front());
            q.pop();
        }
        return res;
    }
};
