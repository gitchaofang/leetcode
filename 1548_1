class Solution {
public:
    vector<int> mostSimilar(int n, vector<vector<int>>& roads, vector<string>& names, vector<string>& targetPath) {
        std::vector<std::vector<int>> bond(n);
        for(const std::vector<int>&v : roads){
            bond[v[0]].push_back(v[1]);
            bond[v[1]].push_back(v[0]);
        }
        int length = targetPath.size();
        std::vector<std::vector<int>> dp(length + 1, std::vector<int>(n, 0));
        for(int i = 1; i <= length; ++i){
            for(int j = 0; j < n; ++j){
                dp[i][j] = INT_MAX;
                int d = (names[j] != targetPath[length - i] ? 1 : 0);
                for(const int& nb: bond[j]){
                    dp[i][j] = std::min(dp[i][j], d + dp[i - 1][nb]);
                }
            }
        }
        int dis = INT_MAX;
        int start = 0;
        for(int i = 0; i < n; ++i){
            if(dp[length][i] < dis){
                start = i;
                dis = dp[length][i];
            }
        }
        std::vector<int> res;
        for(int i = 0; i < length; ++i){
            res.push_back(start);
            dis -= (names[start] == targetPath[i] ? 0 : 1);
            if(i == length - 1) continue;
            for(const int& nb: bond[start]){
                if(dp[length - i - 1][nb] != dis) continue;
                start = nb;
                break;
            }
        }
        return res;
    }
};
