class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {
        int row = matrix.size();
        int col = matrix[0].size();
        std::queue<std::pair<int,int>>q;
        for(int i = 0; i < row; ++i){
            for(int j = 0; j < col; ++j){
                if(matrix[i][j] == 1) matrix[i][j] = INT_MAX;
                else q.push({i * col + j, 0});
            }
        }
        std::vector<std::pair<int,int>> dire({{0,-1},{-1,0},{0,1},{1,0}});
        while(!q.empty()){
            std::pair<int,int> p = q.front();
            q.pop();
            for(const std::pair<int,int>& dir: dire){
                int x = dir.first + p.first / col;
                int y = dir.second + p.first % col;
                if(x < 0 || x >= row || y < 0 || y >= col || matrix[x][y] <= p.second + 1) continue;
                matrix[x][y] = p.second + 1;
                q.push({x * col + y, p.second + 1});
            }
        }
        return matrix;
    }
};
