struct cmp{
    bool operator ()(const std::pair<int,int>& p1, const std::pair<int,int>& p2){
        return p1.first > p2.first;
    }  
}; 
class Solution {
public:
    int trapRainWater(vector<vector<int>>& heightMap) {
        int row = heightMap.size();
        int col = heightMap[0].size();
        std::vector<std::vector<int>> water(row, std::vector<int>(col, -1));
        std::priority_queue<std::pair<int,int>, std::vector<std::pair<int,int>>,cmp>q;
        for(int i = 0; i < col; ++i){
            q.push({heightMap[0][i],i});
            heightMap[0][i] = -1;
            q.push({heightMap[row - 1][i], (row - 1) * col + i});
            heightMap[row - 1][i] = -1;
        }
        for(int i = 1; i < row - 1; ++i){
            q.push({heightMap[i][0], i * col});
            heightMap[i][0] = -1;
            q.push({heightMap[i][col - 1], i * col + col - 1});
            heightMap[i][col - 1] = -1;
        }
        int res = 0;
        int lev = 0;
        std::vector<std::pair<int,int>> dire({{0,-1},{-1,0},{0,1},{1,0}});
        while (true){
            ++lev;
            while(!q.empty() && q.top().first <= lev){
                std::pair<int,int>p = q.top();
                q.pop();
                for(const std::pair<int,int>& dir: dire){
                    int x = dir.first + p.second / col;
                    int y = dir.second + p.second % col;
                    if(x < 0 || x >= row || y < 0 || y >= col || heightMap[x][y] == -1) continue;
                    res += std::max(0,lev - heightMap[x][y]);
                    q.push({heightMap[x][y], x * col +y});
                    heightMap[x][y] = -1;
                }
            }
            if(q.empty()) return res;
        }
        return res;
    }
};
