class Solution {
public:
    string minWindow(string S, string T) {
        int sn = S.size();
        int tn = T.size();
        std::unordered_map<char,std::vector<int>> m;
        for(int i=0; i<tn; ++i) m[T[i]].push_back(i);
        std::vector<std::vector<int>> dp(sn,std::vector<int>(tn, -1));
        std::string res = "";
        for(int i = 0; i < S.size(); ++i){
            if(i != 0){
                for(int k = 0; k < tn; ++k) dp[i][k] = dp[i - 1][k];
            }
            char c = S[i];
            if(m.find(c) == m.end()) continue;
            for(const int& k: m[c]){
                if(k == 0) dp[i][k] = i;
                else{
                    if(i == 0) continue;
                    dp[i][k] = dp[i - 1][k - 1];
                }
                if(k == tn - 1){
                    if(dp[i][k] == -1) continue;
                    if(res == "" || res.size() > i - dp[i][k] + 1) res = S.substr(dp[i][k], i - dp[i][k] + 1);
                }
            }
        }
        return res;
    }
};
