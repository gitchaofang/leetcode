class Solution {
public:
    int seek(const std::vector<int>& nums1, const std::vector<int>& nums2,int i, int j, int k){
        int n = nums1.size();
        int m = nums2.size();
        if(i >= n) return nums2[j + k - 1];
        if(j >= m) return nums1[i + k - 1];
        if(k == 1) return std::min(nums1[i],nums2[j]);
        int mid1 = (i + k/2  > n)? INT_MAX : nums1[i + k/2 - 1];
        int mid2 = (j + k/2  > m)? INT_MAX : nums2[j + k/2 -1];
        if(mid1 < mid2) return seek(nums1,nums2,i + k/2, j, k - k /2);
        return seek(nums1,nums2,i,j + k/2, k - k/2);
    }
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size();
        int m = nums2.size();
        int md1 = seek(nums1,nums2,0,0,(n+m+1)/2);
        int md2 = seek(nums1,nums2,0,0,(n+m+2)/2);
        return double(md1 + md2) / 2.0;
    }
};
