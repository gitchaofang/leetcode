class Solution {
public:
    int bs(const std::vector<std::vector<int>>& v, int left, int right, int k, int pos){
        while(left < right){
            int mid = (right - left)/2 + left;
            if(v[mid][pos] > k) right = mid;
            else left = mid + 1;
        }
        return (v[right][pos] > k)?right:right+1;
    }
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        int n = intervals.size();
        if(n == 0) return {newInterval};
        int left = bs(intervals,0,n-1,newInterval[0],0);
        int right = bs(intervals,0,n-1,newInterval[1],1);
        if(left >0 && newInterval[0] <= intervals[left - 1][1]){
            newInterval[0] = intervals[left - 1][0];
            --left;
        }
        if(right < n && newInterval[1] >= intervals[right][0]){
            newInterval[1] =intervals[right][1];
            ++right;
        }
        
        intervals.erase(intervals.begin() + left, intervals.begin() + right );
        intervals.insert(intervals.begin() + left, {newInterval[0],newInterval[1]});
        return intervals;
    }
};
