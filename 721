class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        std::unordered_map<std::string,std::vector<std::vector<std::string>>> m;
        for(const std::vector<std::string>& v: accounts){
            std::string name = v[0];
            std::vector<std::string> mail(v.begin() + 1, v.end());
            m[name].push_back(mail);
        }
        std::vector<vector<std::string>> res;
        for(auto it = m.begin(); it != m.end(); ++it){
            std::vector<std::vector<std::string>>& mail = it -> second; 
            std::unordered_map<std::string,std::unordered_set<int>>connect;
            for(int i = 0; i < mail.size(); ++i){
                for(const std::string& str: mail[i]) connect[str].insert(i);
            }
            std::vector<std::unordered_set<int>> nb(mail.size());
            for(int i = 0; i < mail.size(); ++i){
                for(const std::string& ns: mail[i]){
                    for(const int& n: connect[ns]) nb[i].insert(n);
                    nb[i].erase(i);
                }
            }
            std::unordered_set<int> visited;
            for(int i = 0; i < mail.size(); ++i){
                if(visited.find(i) != visited.end()) continue;
                std::set<std::string> ml;
                std::queue<int>q({i});
                visited.insert(i);
                std::vector<std::string> item({it -> first});
                while(!q.empty()){
                    for(int j = q.size(); j > 0; --j){
                        int pos = q.front();
                        q.pop();
                        ml.insert(mail[pos].begin(),mail[pos].end());
                        for(const int& nb_pos: nb[pos]){
                            if(visited.find(nb_pos) != visited.end()) continue;
                            q.push(nb_pos);
                            visited.insert(nb_pos);
                        }
                    }
                }
                item.insert(item.end(),ml.begin(),ml.end());
                res.push_back(item);
            }
        }
        return res;
    }
};
