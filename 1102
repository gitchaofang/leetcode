class Solution {
public:
    int maximumMinimumPath(vector<vector<int>>& A) {
        int row = A.size();
        int col = A[0].size();
        std::vector<std::vector<int>> dp(row, std::vector<int>(col, INT_MIN));
        dp[0][0] = A[0][0];
        std::queue<int> q({0});
        std::vector<std::pair<int,int>> dire({{0,-1},{-1,0},{0,1},{1,0}});
        while(!q.empty()){
            int cur = q.front();
            q.pop();
            for(const std::pair<int,int>& dir: dire){
                int x = cur / col + dir.first;
                int y = cur % col + dir.second;
                if(x < 0 || x >= row || y < 0 || y >= col)continue;
                int rec = std::min(A[x][y], dp[cur / col][cur % col]);
                if(rec <= dp[x][y]) continue;
                dp[x][y] = rec;
                q.push(x * col + y);
            }
        }
        return dp[row - 1][col - 1];
    }
};
