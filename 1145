class Solution {
public:
    int dfs(TreeNode* root){
        if(!root) return 0;
        int left = dfs(root -> left);
        int right = dfs(root -> right);
        return left + right + 1;
    }
    bool btreeGameWinningMove(TreeNode* root, int n, int x) {
        std::queue<TreeNode*> q({root});
        TreeNode* targ;
        while(!q.empty()){
            TreeNode* node = q.front();
            q.pop();
            if(node -> val == x){
                targ = node;
                break;
            }
            if(node -> left) q.push(node -> left);
            if(node -> right) q.push(node -> right);
        }
        
        int left = dfs(targ -> left);
        int right = dfs(targ -> right);
        if(left > n/2 || right > n/2 ||n - (left + right + 1) > n/2) return true;
        return false;
    }
    
};
