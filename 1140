class Solution {
public:
    int dfs(const std::vector<int>& v, const int& cur, const int& M){
        int n = v.size();
        int res = 0;
        int s = 0;
        std::string str;
        int new_m;
        for(int i = cur; i < std::min(n, cur + 2 * M); ++i){
            s += v[i];
            if(i == n - 1) res = std::max(s, res);
            else{ 
                new_m = std::max(M, i - cur + 1);
                str = std::to_string(i + 1) + '-' + std::to_string(new_m);
                if(visited.find(str) != visited.end()) res = std::max(res,s + sum[i + 1] - visited[str]);
                else res = std::max(sum[i+1] - dfs(v, i + 1, new_m) + s, res);
            }
        }
        visited[std::to_string(cur) + '-' + std::to_string(M)] = res;
        return res;
    }
    int stoneGameII(vector<int>& piles) {
        sum.resize(piles.size(),0);
        sum.back() = piles.back();
        for(int i = piles.size() - 2; i >= 0; --i) sum[i] = sum[i + 1] + piles[i]; 
        return dfs(piles,0,1);
    }
private:
    std::vector<int> sum;
    std::unordered_map<std::string,int> visited;
};
