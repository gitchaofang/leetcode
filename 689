class Solution {
public:
    bool dfs(const int& cur, const int& targ, const int& k,const std::vector<int>& nums, std::vector<bool>& visited, const int& start){
        if(k == 1) return true;
        if(cur == targ) return dfs(0, targ, k - 1, nums, visited, 0);
        for(int i = start; i < nums.size(); ++i){
            if(visited[i] == true) continue;
            visited[i] = true;
            if(dfs(cur + nums[i], targ, k, nums, visited, i + 1)) return true;
            visited[i] = false;
        }
        return false;
    }
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int sm = 0;
        for(const int& d: nums) sm += d;
        if(sm % k != 0) return false;
        int targ = sm / k;
        std::vector<bool> visited(nums.size(), false);
        return dfs(0, targ, k, nums,visited, 0);
    }
};
