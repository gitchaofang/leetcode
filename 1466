class Solution {
public:
    int minReorder(int n, vector<vector<int>>& connections) {
        std::vector<std::vector<int>> con(n);
        std::vector<std::vector<int>> rev(n);
        for(const std::vector<int>& v: connections){ 
            con[v[0]].push_back(v[1]);
            rev[v[1]].push_back(v[0]);
        }
         
        
        int res = 0;
        std::queue<int> q({0});
        std::unordered_set<int> visited({0});
        while(!q.empty()){
            int cur = q.front();
            q.pop();
            for(const int& next: con[cur]){
                if(visited.find(next) == visited.end() && next != n){
                    ++res;
                    visited.insert(next);
                    q.push(next);
                } 
            }
            for(const int& next: rev[cur]){
                if(visited.find(next) == visited.end() && next != n){
                    q.push(next);
                    visited.insert(next);
                }
            }
        }
        return res;
    }
};
