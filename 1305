class Solution {
public:
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        std::stack<TreeNode*> st1;
        TreeNode* pre_node1 = root1;
        std::stack<TreeNode*> st2;
        TreeNode* pre_node2 = root2;
        std::vector<int>res;
        while(!st1.empty() || !st2.empty() || pre_node1 || pre_node2){
            while(pre_node1){
                st1.push(pre_node1);
                pre_node1 =  pre_node1 -> left;
            }
            while(pre_node2){
                st2.push(pre_node2);
                pre_node2 = pre_node2 -> left;
            }
            if(!st1.empty() && !st2.empty()){
                TreeNode* node1 = st1.top();
                st1.pop();
                TreeNode* node2 = st2.top();
                st2.pop();
                if(node1->val < node2 -> val){
                    res.push_back(node1->val);
                    st2.push(node2);
                    if(node1 -> right) pre_node1 = node1 -> right;
                }
                else {
                    res.push_back(node2->val);
                    st1.push(node1);
                    if(node2 -> right) pre_node2 = node2 -> right;   
                }
            }
            else if(!st1.empty()) break;
            else{
                st1 = st2;
                pre_node1 = pre_node2;
                break;
            }
        }
        while(!st1.empty() || pre_node1){
            while(pre_node1){
                st1.push(pre_node1);
                pre_node1 = pre_node1 -> left;
            }
            TreeNode* node = st1.top();
            st1.pop();
            res.push_back(node -> val);
            if(node -> right) pre_node1 = node -> right;
        }
        return res;
    }
};
