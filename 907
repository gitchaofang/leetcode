class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        int n = arr.size();
        std::vector<int> dp(n, 0);
        std::stack<std::pair<int,int>> st;
        int mod = std::pow(10,9) + 7;
        int res = 0;
        for(int i = 0; i < n; ++i){
            if(i == 0){ 
                dp[i] = arr[i];
                st.push({0,1});
            }
            else if(arr[i] >= arr[i - 1]){
                dp[i] = (arr[i] + dp[i - 1]) % mod;
                st.push({i,1});
            }
            else{
                int cnt = 1;
                while(!st.empty() && arr[st.top().first] >= arr[i]){
                    cnt += st.top().second;
                    st.pop();
                }
                dp[i] = (arr[i] * cnt  + (st.empty() ? 0 : dp[st.top().first])) % mod;
                st.push({i,cnt});
            }
            res = (res + dp[i])  % mod;
        }
        return res;
        
    }
};
