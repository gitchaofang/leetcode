class Solution {
public:
    void dfs(const std::vector<int>& nums, std::vector<int>& str, const int& k, std::vector<std::vector<int>>& res, std::vector<bool>& visited){  
        if(k == 0){
            res.push_back(str);
            return;
        }
        int pos = nums.size() - k;

        for(int i = 0; i < nums.size(); ++i){
            if(visited[i] == true) continue;
            visited[i] = true;
            str[pos] = nums[i];
            dfs(nums, str, k - 1, res, visited);
            visited[i] = false;
        }
        return;
    }
    vector<vector<int>> permute(vector<int>& nums) {
        int n = nums.size();
        std::vector<bool> visited(n, false);
        std::vector<std::vector<int>> res;
        std::vector<int> str(n);
        dfs(nums,str,n,res,visited);
        return res;
    }
};
