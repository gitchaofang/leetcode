class Solution {
public:
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        std::queue<std::vector<std::string>>q({{beginWord}});  
        std::vector<std::vector<std::string>> res;
        std::unordered_set<std::string> check(wordList.begin(),wordList.end());
        std::unordered_set<std::string> show;
        bool judge = false;
        while(!q.empty()){
            std::vector<std::string> store;
            int n = q.size();
            for(int i=0; i<n; ++i){
                std::vector<std::string> v = q.front();
                q.pop();
                std::string last_let = v.back();
                for(int j=0; j<last_let.size(); ++j){
                    for(char c='a'; c<='z';++c){
                        std::string str = last_let;
                        str[j] = c;
                        if(check.find(str) == check.end()) continue;
                        if(str == endWord){
                            judge = true;
                            std::vector<std::string> tv = v;
                            tv.push_back(str);
                            res.push_back(tv);
                        }
                        else if(judge == false){
                            store.push_back(str);
                            std::vector<std::string> tv = v;
                            tv.push_back(str);
                            q.push(tv);
                        }
                    }
                }
            }
            if(judge == true) break;
            for(std::string& str: store) check.erase(str);
        }
        return res;
    }
};
